--- a/IOSupport/GenericOCIOOpenGL.cpp
+++ b/IOSupport/GenericOCIOOpenGL.cpp
@@ -184,7 +184,7 @@ GenericOCIO::applyGL(const Texture* srcI
                      string* lut3DCacheIDParam,
                      string* shaderTextCacheIDParam)
 {
-#if OCIO_VERSION_HEX > 0x01010000 // more recent than 1.1.0?
+#if OCIO_VERSION_MAJOR > 1 // more recent than 1.x?
     // TODO: OCIO 2 with new GPU API https://github.com/imageworks/OpenColorIO/pull/539
     // See https://github.com/imageworks/OpenColorIO/blob/master/src/apps/ociodisplay/main.cpp
 #error "Code must be upgraded for OCIO 2 with new GPU API"
--- a/OIIO/ReadOIIO.cpp
+++ b/OIIO/ReadOIIO.cpp
@@ -92,6 +92,13 @@ using std::make_pair;
 
 OFXS_NAMESPACE_ANONYMOUS_ENTER
 
+#if OIIO_PLUGIN_VERSION >= 22
+// OIIO_VERSION_MAJOR >= 2
+typedef std::unique_ptr<ImageInput> ImageInputPtr;
+#else
+typedef ImageInput* ImageInputPtr;
+#endif
+
 #define kPluginName "ReadOIIO"
 #define kPluginGrouping "Image/Readers"
 #define kPluginDescription \
@@ -436,13 +443,13 @@ private:
 
     void getOIIOChannelIndexesFromLayerName(const string& filename, int view, const string& layerName, PixelComponentEnum pixelComponents, const vector<ImageSpec>& subimages, vector<int>& channels, int& numChannels, int& subImageIndex);
 
-    void openFile(const string& filename, bool useCache, ImageInput** img, vector<ImageSpec>* subimages);
+    void openFile(const string& filename, bool useCache, ImageInputPtr* img, vector<ImageSpec>* subimages);
 
     virtual bool getFrameBounds(const string& filename, OfxTime time, int view, OfxRectI *bounds, OfxRectI *format, double *par, string *error,  int* tile_width, int* tile_height) OVERRIDE FINAL;
 
     string metadata(const string& filename);
 
-    void getSpecsFromImageInput(ImageInput* img, vector<ImageSpec>* subimages) const;
+    void getSpecsFromImageInput(const ImageInputPtr& img, vector<ImageSpec>* subimages) const;
 
     void getSpecsFromCache(const string& filename, vector<ImageSpec>* subimages) const;
 
@@ -1288,7 +1295,7 @@ ReadOIIOPlugin::buildOutputLayerMenu(con
 } // buildOutputLayerMenu
 
 void
-ReadOIIOPlugin::getSpecsFromImageInput(ImageInput* img,
+ReadOIIOPlugin::getSpecsFromImageInput(const ImageInputPtr& img,
                                        vector<ImageSpec>* subimages) const
 {
     subimages->clear();
@@ -1345,8 +1352,12 @@ ReadOIIOPlugin::getSpecs(const string &f
         // use the right config
         ImageSpec config;
         getConfig(&config);
-        
+
+#     if OIIO_PLUGIN_VERSION >= 22
+        ImageInputPtr img = ImageInput::open(filename, &config);
+#     else
         auto_ptr<ImageInput> img( ImageInput::open(filename, &config) );
+#     endif
         if ( !img.get() ) {
             if (error) {
                 *error = "Could node open file " + filename;
@@ -1354,7 +1365,11 @@ ReadOIIOPlugin::getSpecs(const string &f
 
             return;
         }
+#     if OIIO_PLUGIN_VERSION >= 22
+        getSpecsFromImageInput(img, subimages);
+#     else
         getSpecsFromImageInput(img.get(), subimages);
+#     endif
         img->close();
     }
     if ( subimages->empty() ) {
@@ -1954,7 +1969,7 @@ ReadOIIOPlugin::getConfig(ImageSpec* con
 void
 ReadOIIOPlugin::openFile(const string& filename,
                          bool useCache,
-                         ImageInput** img,
+                         ImageInputPtr* img,
                          vector<ImageSpec>* subimages)
 {
     if (_cache && useCache) {
@@ -2172,13 +2187,21 @@ ReadOIIOPlugin::decodePlane(const string
 
     vector<int> channels;
     int numChannels = 0;
+# if OIIO_PLUGIN_VERSION >= 22
+    ImageInputPtr img;
+# else
     auto_ptr<ImageInput> img;
+# endif
     vector<ImageSpec> subimages;
 
-    ImageInput* rawImg = 0;
+    ImageInputPtr rawImg = 0;
     openFile(filename, useCache, &rawImg, &subimages);
     if (rawImg) {
+# if OIIO_PLUGIN_VERSION >= 22
+        img.swap(rawImg);
+# else
         img.reset(rawImg);
+#endif
     }
 
     if ( subimages.empty() ) {
@@ -2771,14 +2794,22 @@ ReadOIIOPlugin::metadata(const string& f
 {
     stringstream ss;
 
+# if OIIO_PLUGIN_VERSION >= 22
+    ImageInputPtr img;
+# else
     auto_ptr<ImageInput> img;
+# endif
 
     if (!_cache) {
         // use the right config
         ImageSpec config;
         getConfig(&config);
         
+#     if OIIO_PLUGIN_VERSION >= 22
+        img = ImageInput::open(filename, &config);
+#     else
         img.reset( ImageInput::open(filename, &config) );
+#     endif
         if ( !img.get() ) {
             setPersistentMessage(Message::eMessageError, "", string("ReadOIIO: cannot open file ") + filename);
             throwSuiteStatusException(kOfxStatFailed);
--- a/OIIO/WriteOIIO.cpp
+++ b/OIIO/WriteOIIO.cpp
@@ -53,6 +53,13 @@ using std::map;
 
 OFXS_NAMESPACE_ANONYMOUS_ENTER
 
+#if OIIO_PLUGIN_VERSION >= 22
+// OIIO_VERSION_MAJOR >= 2
+typedef std::unique_ptr<ImageOutput> ImageOutputPtr;
+#else
+typedef ImageOutput* ImageOutputPtr;
+#endif
+
 #define kPluginName "WriteOIIO"
 #define kPluginGrouping "Image/Writers"
 #define kPluginDescription "Write images using OpenImageIO."
@@ -821,7 +828,11 @@ WriteOIIOPlugin::refreshParamsVisibility
 
 struct WriteOIIOEncodePlanesData
 {
+# if OIIO_PLUGIN_VERSION >= 22
+    ImageOutputPtr output;
+#else
     auto_ptr<ImageOutput> output;
+#endif
     vector<ImageSpec> specs;
 };
 
@@ -858,7 +869,11 @@ WriteOIIOPlugin::beginEncodeParts(void*
     assert( !viewsToRender.empty() );
     assert(user_data);
     WriteOIIOEncodePlanesData* data = (WriteOIIOEncodePlanesData*)user_data;
+# if OIIO_PLUGIN_VERSION >= 22
+    data->output = ImageOutput::create(filename);
+# else
     data->output.reset( ImageOutput::create(filename) );
+# endif
     if ( !data->output.get() ) {
         // output is NULL
         setPersistentMessage(Message::eMessageError, "", string("Cannot create output file ") + filename);
